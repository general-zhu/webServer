// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: resolver.proto

#ifndef PROTOBUF_resolver_2eproto__INCLUDED
#define PROTOBUF_resolver_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace resolver {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_resolver_2eproto();
void protobuf_AssignDesc_resolver_2eproto();
void protobuf_ShutdownFile_resolver_2eproto();

class ResolveRequest;
class ResolveResponse;

// ===================================================================

class ResolveRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resolver.ResolveRequest) */ {
 public:
  ResolveRequest();
  virtual ~ResolveRequest();

  ResolveRequest(const ResolveRequest& from);

  inline ResolveRequest& operator=(const ResolveRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolveRequest& default_instance();

  void Swap(ResolveRequest* other);

  // implements Message ----------------------------------------------

  inline ResolveRequest* New() const { return New(NULL); }

  ResolveRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResolveRequest& from);
  void MergeFrom(const ResolveRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResolveRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string address = 1;
  bool has_address() const;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // @@protoc_insertion_point(class_scope:resolver.ResolveRequest)
 private:
  inline void set_has_address();
  inline void clear_has_address();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  friend void  protobuf_AddDesc_resolver_2eproto();
  friend void protobuf_AssignDesc_resolver_2eproto();
  friend void protobuf_ShutdownFile_resolver_2eproto();

  void InitAsDefaultInstance();
  static ResolveRequest* default_instance_;
};
// -------------------------------------------------------------------

class ResolveResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resolver.ResolveResponse) */ {
 public:
  ResolveResponse();
  virtual ~ResolveResponse();

  ResolveResponse(const ResolveResponse& from);

  inline ResolveResponse& operator=(const ResolveResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolveResponse& default_instance();

  void Swap(ResolveResponse* other);

  // implements Message ----------------------------------------------

  inline ResolveResponse* New() const { return New(NULL); }

  ResolveResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResolveResponse& from);
  void MergeFrom(const ResolveResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResolveResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool resolved = 1 [default = false];
  bool has_resolved() const;
  void clear_resolved();
  static const int kResolvedFieldNumber = 1;
  bool resolved() const;
  void set_resolved(bool value);

  // repeated fixed32 ip = 2;
  int ip_size() const;
  void clear_ip();
  static const int kIpFieldNumber = 2;
  ::google::protobuf::uint32 ip(int index) const;
  void set_ip(int index, ::google::protobuf::uint32 value);
  void add_ip(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      ip() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_ip();

  // repeated int32 port = 3;
  int port_size() const;
  void clear_port();
  static const int kPortFieldNumber = 3;
  ::google::protobuf::int32 port(int index) const;
  void set_port(int index, ::google::protobuf::int32 value);
  void add_port(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      port() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_port();

  // @@protoc_insertion_point(class_scope:resolver.ResolveResponse)
 private:
  inline void set_has_resolved();
  inline void clear_has_resolved();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > ip_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > port_;
  bool resolved_;
  friend void  protobuf_AddDesc_resolver_2eproto();
  friend void protobuf_AssignDesc_resolver_2eproto();
  friend void protobuf_ShutdownFile_resolver_2eproto();

  void InitAsDefaultInstance();
  static ResolveResponse* default_instance_;
};
// ===================================================================

class ResolverService_Stub;

class ResolverService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline ResolverService() {};
 public:
  virtual ~ResolverService();

  typedef ResolverService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void Resolve(::google::protobuf::RpcController* controller,
                       const ::resolver::ResolveRequest* request,
                       ::resolver::ResolveResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ResolverService);
};

class ResolverService_Stub : public ResolverService {
 public:
  ResolverService_Stub(::google::protobuf::RpcChannel* channel);
  ResolverService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~ResolverService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements ResolverService ------------------------------------------

  void Resolve(::google::protobuf::RpcController* controller,
                       const ::resolver::ResolveRequest* request,
                       ::resolver::ResolveResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ResolverService_Stub);
};


// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ResolveRequest

// required string address = 1;
inline bool ResolveRequest::has_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolveRequest::set_has_address() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolveRequest::clear_has_address() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolveRequest::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_address();
}
inline const ::std::string& ResolveRequest::address() const {
  // @@protoc_insertion_point(field_get:resolver.ResolveRequest.address)
  return address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolveRequest::set_address(const ::std::string& value) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resolver.ResolveRequest.address)
}
inline void ResolveRequest::set_address(const char* value) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resolver.ResolveRequest.address)
}
inline void ResolveRequest::set_address(const char* value, size_t size) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resolver.ResolveRequest.address)
}
inline ::std::string* ResolveRequest::mutable_address() {
  set_has_address();
  // @@protoc_insertion_point(field_mutable:resolver.ResolveRequest.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResolveRequest::release_address() {
  // @@protoc_insertion_point(field_release:resolver.ResolveRequest.address)
  clear_has_address();
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolveRequest::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    set_has_address();
  } else {
    clear_has_address();
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:resolver.ResolveRequest.address)
}

// -------------------------------------------------------------------

// ResolveResponse

// optional bool resolved = 1 [default = false];
inline bool ResolveResponse::has_resolved() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolveResponse::set_has_resolved() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolveResponse::clear_has_resolved() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolveResponse::clear_resolved() {
  resolved_ = false;
  clear_has_resolved();
}
inline bool ResolveResponse::resolved() const {
  // @@protoc_insertion_point(field_get:resolver.ResolveResponse.resolved)
  return resolved_;
}
inline void ResolveResponse::set_resolved(bool value) {
  set_has_resolved();
  resolved_ = value;
  // @@protoc_insertion_point(field_set:resolver.ResolveResponse.resolved)
}

// repeated fixed32 ip = 2;
inline int ResolveResponse::ip_size() const {
  return ip_.size();
}
inline void ResolveResponse::clear_ip() {
  ip_.Clear();
}
inline ::google::protobuf::uint32 ResolveResponse::ip(int index) const {
  // @@protoc_insertion_point(field_get:resolver.ResolveResponse.ip)
  return ip_.Get(index);
}
inline void ResolveResponse::set_ip(int index, ::google::protobuf::uint32 value) {
  ip_.Set(index, value);
  // @@protoc_insertion_point(field_set:resolver.ResolveResponse.ip)
}
inline void ResolveResponse::add_ip(::google::protobuf::uint32 value) {
  ip_.Add(value);
  // @@protoc_insertion_point(field_add:resolver.ResolveResponse.ip)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ResolveResponse::ip() const {
  // @@protoc_insertion_point(field_list:resolver.ResolveResponse.ip)
  return ip_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ResolveResponse::mutable_ip() {
  // @@protoc_insertion_point(field_mutable_list:resolver.ResolveResponse.ip)
  return &ip_;
}

// repeated int32 port = 3;
inline int ResolveResponse::port_size() const {
  return port_.size();
}
inline void ResolveResponse::clear_port() {
  port_.Clear();
}
inline ::google::protobuf::int32 ResolveResponse::port(int index) const {
  // @@protoc_insertion_point(field_get:resolver.ResolveResponse.port)
  return port_.Get(index);
}
inline void ResolveResponse::set_port(int index, ::google::protobuf::int32 value) {
  port_.Set(index, value);
  // @@protoc_insertion_point(field_set:resolver.ResolveResponse.port)
}
inline void ResolveResponse::add_port(::google::protobuf::int32 value) {
  port_.Add(value);
  // @@protoc_insertion_point(field_add:resolver.ResolveResponse.port)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ResolveResponse::port() const {
  // @@protoc_insertion_point(field_list:resolver.ResolveResponse.port)
  return port_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ResolveResponse::mutable_port() {
  // @@protoc_insertion_point(field_mutable_list:resolver.ResolveResponse.port)
  return &port_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace resolver

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_resolver_2eproto__INCLUDED
