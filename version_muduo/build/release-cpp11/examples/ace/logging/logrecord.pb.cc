// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: logrecord.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "logrecord.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace logging {

namespace {

const ::google::protobuf::Descriptor* LogRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogRecord_Heartbeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogRecord_Heartbeat_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_logrecord_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_logrecord_2eproto() {
  protobuf_AddDesc_logrecord_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "logrecord.proto");
  GOOGLE_CHECK(file != NULL);
  LogRecord_descriptor_ = file->message_type(0);
  static const int LogRecord_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecord, heartbeat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecord, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecord, thread_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecord, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecord, message_),
  };
  LogRecord_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LogRecord_descriptor_,
      LogRecord::default_instance_,
      LogRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecord, _has_bits_[0]),
      -1,
      -1,
      sizeof(LogRecord),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecord, _internal_metadata_),
      -1);
  LogRecord_Heartbeat_descriptor_ = LogRecord_descriptor_->nested_type(0);
  static const int LogRecord_Heartbeat_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecord_Heartbeat, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecord_Heartbeat, process_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecord_Heartbeat, process_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecord_Heartbeat, process_start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecord_Heartbeat, username_),
  };
  LogRecord_Heartbeat_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LogRecord_Heartbeat_descriptor_,
      LogRecord_Heartbeat::default_instance_,
      LogRecord_Heartbeat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecord_Heartbeat, _has_bits_[0]),
      -1,
      -1,
      sizeof(LogRecord_Heartbeat),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecord_Heartbeat, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_logrecord_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LogRecord_descriptor_, &LogRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LogRecord_Heartbeat_descriptor_, &LogRecord_Heartbeat::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_logrecord_2eproto() {
  delete LogRecord::default_instance_;
  delete LogRecord_reflection_;
  delete LogRecord_Heartbeat::default_instance_;
  delete LogRecord_Heartbeat_reflection_;
}

void protobuf_AddDesc_logrecord_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_logrecord_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017logrecord.proto\022\007logging\"\371\001\n\tLogRecord"
    "\022/\n\theartbeat\030\001 \001(\0132\034.logging.LogRecord."
    "Heartbeat\022\r\n\005level\030\002 \002(\005\022\021\n\tthread_id\030\003 "
    "\002(\005\022\021\n\ttimestamp\030\004 \002(\003\022\017\n\007message\030\005 \002(\t\032"
    "u\n\tHeartbeat\022\020\n\010hostname\030\001 \002(\t\022\024\n\014proces"
    "s_name\030\002 \002(\t\022\022\n\nprocess_id\030\003 \002(\005\022\032\n\022proc"
    "ess_start_time\030\004 \002(\003\022\020\n\010username\030\005 \002(\t", 278);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "logrecord.proto", &protobuf_RegisterTypes);
  LogRecord::default_instance_ = new LogRecord();
  LogRecord_Heartbeat::default_instance_ = new LogRecord_Heartbeat();
  LogRecord::default_instance_->InitAsDefaultInstance();
  LogRecord_Heartbeat::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_logrecord_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_logrecord_2eproto {
  StaticDescriptorInitializer_logrecord_2eproto() {
    protobuf_AddDesc_logrecord_2eproto();
  }
} static_descriptor_initializer_logrecord_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogRecord_Heartbeat::kHostnameFieldNumber;
const int LogRecord_Heartbeat::kProcessNameFieldNumber;
const int LogRecord_Heartbeat::kProcessIdFieldNumber;
const int LogRecord_Heartbeat::kProcessStartTimeFieldNumber;
const int LogRecord_Heartbeat::kUsernameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogRecord_Heartbeat::LogRecord_Heartbeat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:logging.LogRecord.Heartbeat)
}

void LogRecord_Heartbeat::InitAsDefaultInstance() {
}

LogRecord_Heartbeat::LogRecord_Heartbeat(const LogRecord_Heartbeat& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:logging.LogRecord.Heartbeat)
}

void LogRecord_Heartbeat::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  process_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  process_id_ = 0;
  process_start_time_ = GOOGLE_LONGLONG(0);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogRecord_Heartbeat::~LogRecord_Heartbeat() {
  // @@protoc_insertion_point(destructor:logging.LogRecord.Heartbeat)
  SharedDtor();
}

void LogRecord_Heartbeat::SharedDtor() {
  hostname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  process_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void LogRecord_Heartbeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogRecord_Heartbeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogRecord_Heartbeat_descriptor_;
}

const LogRecord_Heartbeat& LogRecord_Heartbeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logrecord_2eproto();
  return *default_instance_;
}

LogRecord_Heartbeat* LogRecord_Heartbeat::default_instance_ = NULL;

LogRecord_Heartbeat* LogRecord_Heartbeat::New(::google::protobuf::Arena* arena) const {
  LogRecord_Heartbeat* n = new LogRecord_Heartbeat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogRecord_Heartbeat::Clear() {
// @@protoc_insertion_point(message_clear_start:logging.LogRecord.Heartbeat)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_hostname()) {
      hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_process_name()) {
      process_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    process_id_ = 0;
    process_start_time_ = GOOGLE_LONGLONG(0);
    if (has_username()) {
      username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LogRecord_Heartbeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:logging.LogRecord.Heartbeat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string hostname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logging.LogRecord.Heartbeat.hostname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_process_name;
        break;
      }

      // required string process_name = 2;
      case 2: {
        if (tag == 18) {
         parse_process_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_process_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->process_name().data(), this->process_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logging.LogRecord.Heartbeat.process_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_process_id;
        break;
      }

      // required int32 process_id = 3;
      case 3: {
        if (tag == 24) {
         parse_process_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &process_id_)));
          set_has_process_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_process_start_time;
        break;
      }

      // required int64 process_start_time = 4;
      case 4: {
        if (tag == 32) {
         parse_process_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &process_start_time_)));
          set_has_process_start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_username;
        break;
      }

      // required string username = 5;
      case 5: {
        if (tag == 42) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logging.LogRecord.Heartbeat.username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:logging.LogRecord.Heartbeat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:logging.LogRecord.Heartbeat)
  return false;
#undef DO_
}

void LogRecord_Heartbeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:logging.LogRecord.Heartbeat)
  // required string hostname = 1;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logging.LogRecord.Heartbeat.hostname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->hostname(), output);
  }

  // required string process_name = 2;
  if (has_process_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->process_name().data(), this->process_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logging.LogRecord.Heartbeat.process_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->process_name(), output);
  }

  // required int32 process_id = 3;
  if (has_process_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->process_id(), output);
  }

  // required int64 process_start_time = 4;
  if (has_process_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->process_start_time(), output);
  }

  // required string username = 5;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logging.LogRecord.Heartbeat.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->username(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:logging.LogRecord.Heartbeat)
}

::google::protobuf::uint8* LogRecord_Heartbeat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:logging.LogRecord.Heartbeat)
  // required string hostname = 1;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logging.LogRecord.Heartbeat.hostname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hostname(), target);
  }

  // required string process_name = 2;
  if (has_process_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->process_name().data(), this->process_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logging.LogRecord.Heartbeat.process_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->process_name(), target);
  }

  // required int32 process_id = 3;
  if (has_process_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->process_id(), target);
  }

  // required int64 process_start_time = 4;
  if (has_process_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->process_start_time(), target);
  }

  // required string username = 5;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logging.LogRecord.Heartbeat.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->username(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logging.LogRecord.Heartbeat)
  return target;
}

int LogRecord_Heartbeat::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:logging.LogRecord.Heartbeat)
  int total_size = 0;

  if (has_hostname()) {
    // required string hostname = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hostname());
  }

  if (has_process_name()) {
    // required string process_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->process_name());
  }

  if (has_process_id()) {
    // required int32 process_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->process_id());
  }

  if (has_process_start_time()) {
    // required int64 process_start_time = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->process_start_time());
  }

  if (has_username()) {
    // required string username = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  return total_size;
}
int LogRecord_Heartbeat::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:logging.LogRecord.Heartbeat)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string hostname = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hostname());

    // required string process_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->process_name());

    // required int32 process_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->process_id());

    // required int64 process_start_time = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->process_start_time());

    // required string username = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogRecord_Heartbeat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:logging.LogRecord.Heartbeat)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LogRecord_Heartbeat* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LogRecord_Heartbeat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:logging.LogRecord.Heartbeat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:logging.LogRecord.Heartbeat)
    MergeFrom(*source);
  }
}

void LogRecord_Heartbeat::MergeFrom(const LogRecord_Heartbeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:logging.LogRecord.Heartbeat)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hostname()) {
      set_has_hostname();
      hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
    }
    if (from.has_process_name()) {
      set_has_process_name();
      process_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.process_name_);
    }
    if (from.has_process_id()) {
      set_process_id(from.process_id());
    }
    if (from.has_process_start_time()) {
      set_process_start_time(from.process_start_time());
    }
    if (from.has_username()) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LogRecord_Heartbeat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:logging.LogRecord.Heartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogRecord_Heartbeat::CopyFrom(const LogRecord_Heartbeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:logging.LogRecord.Heartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogRecord_Heartbeat::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void LogRecord_Heartbeat::Swap(LogRecord_Heartbeat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogRecord_Heartbeat::InternalSwap(LogRecord_Heartbeat* other) {
  hostname_.Swap(&other->hostname_);
  process_name_.Swap(&other->process_name_);
  std::swap(process_id_, other->process_id_);
  std::swap(process_start_time_, other->process_start_time_);
  username_.Swap(&other->username_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogRecord_Heartbeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogRecord_Heartbeat_descriptor_;
  metadata.reflection = LogRecord_Heartbeat_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogRecord::kHeartbeatFieldNumber;
const int LogRecord::kLevelFieldNumber;
const int LogRecord::kThreadIdFieldNumber;
const int LogRecord::kTimestampFieldNumber;
const int LogRecord::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogRecord::LogRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:logging.LogRecord)
}

void LogRecord::InitAsDefaultInstance() {
  heartbeat_ = const_cast< ::logging::LogRecord_Heartbeat*>(&::logging::LogRecord_Heartbeat::default_instance());
}

LogRecord::LogRecord(const LogRecord& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:logging.LogRecord)
}

void LogRecord::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  heartbeat_ = NULL;
  level_ = 0;
  thread_id_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogRecord::~LogRecord() {
  // @@protoc_insertion_point(destructor:logging.LogRecord)
  SharedDtor();
}

void LogRecord::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete heartbeat_;
  }
}

void LogRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogRecord_descriptor_;
}

const LogRecord& LogRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logrecord_2eproto();
  return *default_instance_;
}

LogRecord* LogRecord::default_instance_ = NULL;

LogRecord* LogRecord::New(::google::protobuf::Arena* arena) const {
  LogRecord* n = new LogRecord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:logging.LogRecord)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LogRecord, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LogRecord*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(level_, timestamp_);
    if (has_heartbeat()) {
      if (heartbeat_ != NULL) heartbeat_->::logging::LogRecord_Heartbeat::Clear();
    }
    if (has_message()) {
      message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LogRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:logging.LogRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .logging.LogRecord.Heartbeat heartbeat = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_heartbeat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required int32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_thread_id;
        break;
      }

      // required int32 thread_id = 3;
      case 3: {
        if (tag == 24) {
         parse_thread_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &thread_id_)));
          set_has_thread_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_timestamp;
        break;
      }

      // required int64 timestamp = 4;
      case 4: {
        if (tag == 32) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_message;
        break;
      }

      // required string message = 5;
      case 5: {
        if (tag == 42) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logging.LogRecord.message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:logging.LogRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:logging.LogRecord)
  return false;
#undef DO_
}

void LogRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:logging.LogRecord)
  // optional .logging.LogRecord.Heartbeat heartbeat = 1;
  if (has_heartbeat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->heartbeat_, output);
  }

  // required int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // required int32 thread_id = 3;
  if (has_thread_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->thread_id(), output);
  }

  // required int64 timestamp = 4;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->timestamp(), output);
  }

  // required string message = 5;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logging.LogRecord.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:logging.LogRecord)
}

::google::protobuf::uint8* LogRecord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:logging.LogRecord)
  // optional .logging.LogRecord.Heartbeat heartbeat = 1;
  if (has_heartbeat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->heartbeat_, false, target);
  }

  // required int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // required int32 thread_id = 3;
  if (has_thread_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->thread_id(), target);
  }

  // required int64 timestamp = 4;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->timestamp(), target);
  }

  // required string message = 5;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logging.LogRecord.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logging.LogRecord)
  return target;
}

int LogRecord::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:logging.LogRecord)
  int total_size = 0;

  if (has_level()) {
    // required int32 level = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  if (has_thread_id()) {
    // required int32 thread_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->thread_id());
  }

  if (has_timestamp()) {
    // required int64 timestamp = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  if (has_message()) {
    // required string message = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  return total_size;
}
int LogRecord::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:logging.LogRecord)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001e) ^ 0x0000001e) == 0) {  // All required fields are present.
    // required int32 level = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());

    // required int32 thread_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->thread_id());

    // required int64 timestamp = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());

    // required string message = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .logging.LogRecord.Heartbeat heartbeat = 1;
  if (has_heartbeat()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->heartbeat_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:logging.LogRecord)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LogRecord* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LogRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:logging.LogRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:logging.LogRecord)
    MergeFrom(*source);
  }
}

void LogRecord::MergeFrom(const LogRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:logging.LogRecord)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heartbeat()) {
      mutable_heartbeat()->::logging::LogRecord_Heartbeat::MergeFrom(from.heartbeat());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_thread_id()) {
      set_thread_id(from.thread_id());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_message()) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LogRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:logging.LogRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogRecord::CopyFrom(const LogRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:logging.LogRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001e) != 0x0000001e) return false;

  if (has_heartbeat()) {
    if (!this->heartbeat_->IsInitialized()) return false;
  }
  return true;
}

void LogRecord::Swap(LogRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogRecord::InternalSwap(LogRecord* other) {
  std::swap(heartbeat_, other->heartbeat_);
  std::swap(level_, other->level_);
  std::swap(thread_id_, other->thread_id_);
  std::swap(timestamp_, other->timestamp_);
  message_.Swap(&other->message_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogRecord_descriptor_;
  metadata.reflection = LogRecord_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogRecord_Heartbeat

// required string hostname = 1;
bool LogRecord_Heartbeat::has_hostname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LogRecord_Heartbeat::set_has_hostname() {
  _has_bits_[0] |= 0x00000001u;
}
void LogRecord_Heartbeat::clear_has_hostname() {
  _has_bits_[0] &= ~0x00000001u;
}
void LogRecord_Heartbeat::clear_hostname() {
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hostname();
}
 const ::std::string& LogRecord_Heartbeat::hostname() const {
  // @@protoc_insertion_point(field_get:logging.LogRecord.Heartbeat.hostname)
  return hostname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogRecord_Heartbeat::set_hostname(const ::std::string& value) {
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logging.LogRecord.Heartbeat.hostname)
}
 void LogRecord_Heartbeat::set_hostname(const char* value) {
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logging.LogRecord.Heartbeat.hostname)
}
 void LogRecord_Heartbeat::set_hostname(const char* value, size_t size) {
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logging.LogRecord.Heartbeat.hostname)
}
 ::std::string* LogRecord_Heartbeat::mutable_hostname() {
  set_has_hostname();
  // @@protoc_insertion_point(field_mutable:logging.LogRecord.Heartbeat.hostname)
  return hostname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LogRecord_Heartbeat::release_hostname() {
  // @@protoc_insertion_point(field_release:logging.LogRecord.Heartbeat.hostname)
  clear_has_hostname();
  return hostname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogRecord_Heartbeat::set_allocated_hostname(::std::string* hostname) {
  if (hostname != NULL) {
    set_has_hostname();
  } else {
    clear_has_hostname();
  }
  hostname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hostname);
  // @@protoc_insertion_point(field_set_allocated:logging.LogRecord.Heartbeat.hostname)
}

// required string process_name = 2;
bool LogRecord_Heartbeat::has_process_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LogRecord_Heartbeat::set_has_process_name() {
  _has_bits_[0] |= 0x00000002u;
}
void LogRecord_Heartbeat::clear_has_process_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void LogRecord_Heartbeat::clear_process_name() {
  process_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_process_name();
}
 const ::std::string& LogRecord_Heartbeat::process_name() const {
  // @@protoc_insertion_point(field_get:logging.LogRecord.Heartbeat.process_name)
  return process_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogRecord_Heartbeat::set_process_name(const ::std::string& value) {
  set_has_process_name();
  process_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logging.LogRecord.Heartbeat.process_name)
}
 void LogRecord_Heartbeat::set_process_name(const char* value) {
  set_has_process_name();
  process_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logging.LogRecord.Heartbeat.process_name)
}
 void LogRecord_Heartbeat::set_process_name(const char* value, size_t size) {
  set_has_process_name();
  process_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logging.LogRecord.Heartbeat.process_name)
}
 ::std::string* LogRecord_Heartbeat::mutable_process_name() {
  set_has_process_name();
  // @@protoc_insertion_point(field_mutable:logging.LogRecord.Heartbeat.process_name)
  return process_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LogRecord_Heartbeat::release_process_name() {
  // @@protoc_insertion_point(field_release:logging.LogRecord.Heartbeat.process_name)
  clear_has_process_name();
  return process_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogRecord_Heartbeat::set_allocated_process_name(::std::string* process_name) {
  if (process_name != NULL) {
    set_has_process_name();
  } else {
    clear_has_process_name();
  }
  process_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), process_name);
  // @@protoc_insertion_point(field_set_allocated:logging.LogRecord.Heartbeat.process_name)
}

// required int32 process_id = 3;
bool LogRecord_Heartbeat::has_process_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LogRecord_Heartbeat::set_has_process_id() {
  _has_bits_[0] |= 0x00000004u;
}
void LogRecord_Heartbeat::clear_has_process_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void LogRecord_Heartbeat::clear_process_id() {
  process_id_ = 0;
  clear_has_process_id();
}
 ::google::protobuf::int32 LogRecord_Heartbeat::process_id() const {
  // @@protoc_insertion_point(field_get:logging.LogRecord.Heartbeat.process_id)
  return process_id_;
}
 void LogRecord_Heartbeat::set_process_id(::google::protobuf::int32 value) {
  set_has_process_id();
  process_id_ = value;
  // @@protoc_insertion_point(field_set:logging.LogRecord.Heartbeat.process_id)
}

// required int64 process_start_time = 4;
bool LogRecord_Heartbeat::has_process_start_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LogRecord_Heartbeat::set_has_process_start_time() {
  _has_bits_[0] |= 0x00000008u;
}
void LogRecord_Heartbeat::clear_has_process_start_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void LogRecord_Heartbeat::clear_process_start_time() {
  process_start_time_ = GOOGLE_LONGLONG(0);
  clear_has_process_start_time();
}
 ::google::protobuf::int64 LogRecord_Heartbeat::process_start_time() const {
  // @@protoc_insertion_point(field_get:logging.LogRecord.Heartbeat.process_start_time)
  return process_start_time_;
}
 void LogRecord_Heartbeat::set_process_start_time(::google::protobuf::int64 value) {
  set_has_process_start_time();
  process_start_time_ = value;
  // @@protoc_insertion_point(field_set:logging.LogRecord.Heartbeat.process_start_time)
}

// required string username = 5;
bool LogRecord_Heartbeat::has_username() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LogRecord_Heartbeat::set_has_username() {
  _has_bits_[0] |= 0x00000010u;
}
void LogRecord_Heartbeat::clear_has_username() {
  _has_bits_[0] &= ~0x00000010u;
}
void LogRecord_Heartbeat::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
 const ::std::string& LogRecord_Heartbeat::username() const {
  // @@protoc_insertion_point(field_get:logging.LogRecord.Heartbeat.username)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogRecord_Heartbeat::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logging.LogRecord.Heartbeat.username)
}
 void LogRecord_Heartbeat::set_username(const char* value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logging.LogRecord.Heartbeat.username)
}
 void LogRecord_Heartbeat::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logging.LogRecord.Heartbeat.username)
}
 ::std::string* LogRecord_Heartbeat::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:logging.LogRecord.Heartbeat.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LogRecord_Heartbeat::release_username() {
  // @@protoc_insertion_point(field_release:logging.LogRecord.Heartbeat.username)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogRecord_Heartbeat::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:logging.LogRecord.Heartbeat.username)
}

// -------------------------------------------------------------------

// LogRecord

// optional .logging.LogRecord.Heartbeat heartbeat = 1;
bool LogRecord::has_heartbeat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LogRecord::set_has_heartbeat() {
  _has_bits_[0] |= 0x00000001u;
}
void LogRecord::clear_has_heartbeat() {
  _has_bits_[0] &= ~0x00000001u;
}
void LogRecord::clear_heartbeat() {
  if (heartbeat_ != NULL) heartbeat_->::logging::LogRecord_Heartbeat::Clear();
  clear_has_heartbeat();
}
const ::logging::LogRecord_Heartbeat& LogRecord::heartbeat() const {
  // @@protoc_insertion_point(field_get:logging.LogRecord.heartbeat)
  return heartbeat_ != NULL ? *heartbeat_ : *default_instance_->heartbeat_;
}
::logging::LogRecord_Heartbeat* LogRecord::mutable_heartbeat() {
  set_has_heartbeat();
  if (heartbeat_ == NULL) {
    heartbeat_ = new ::logging::LogRecord_Heartbeat;
  }
  // @@protoc_insertion_point(field_mutable:logging.LogRecord.heartbeat)
  return heartbeat_;
}
::logging::LogRecord_Heartbeat* LogRecord::release_heartbeat() {
  // @@protoc_insertion_point(field_release:logging.LogRecord.heartbeat)
  clear_has_heartbeat();
  ::logging::LogRecord_Heartbeat* temp = heartbeat_;
  heartbeat_ = NULL;
  return temp;
}
void LogRecord::set_allocated_heartbeat(::logging::LogRecord_Heartbeat* heartbeat) {
  delete heartbeat_;
  heartbeat_ = heartbeat;
  if (heartbeat) {
    set_has_heartbeat();
  } else {
    clear_has_heartbeat();
  }
  // @@protoc_insertion_point(field_set_allocated:logging.LogRecord.heartbeat)
}

// required int32 level = 2;
bool LogRecord::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LogRecord::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
void LogRecord::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
void LogRecord::clear_level() {
  level_ = 0;
  clear_has_level();
}
 ::google::protobuf::int32 LogRecord::level() const {
  // @@protoc_insertion_point(field_get:logging.LogRecord.level)
  return level_;
}
 void LogRecord::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:logging.LogRecord.level)
}

// required int32 thread_id = 3;
bool LogRecord::has_thread_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LogRecord::set_has_thread_id() {
  _has_bits_[0] |= 0x00000004u;
}
void LogRecord::clear_has_thread_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void LogRecord::clear_thread_id() {
  thread_id_ = 0;
  clear_has_thread_id();
}
 ::google::protobuf::int32 LogRecord::thread_id() const {
  // @@protoc_insertion_point(field_get:logging.LogRecord.thread_id)
  return thread_id_;
}
 void LogRecord::set_thread_id(::google::protobuf::int32 value) {
  set_has_thread_id();
  thread_id_ = value;
  // @@protoc_insertion_point(field_set:logging.LogRecord.thread_id)
}

// required int64 timestamp = 4;
bool LogRecord::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LogRecord::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
void LogRecord::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
void LogRecord::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
 ::google::protobuf::int64 LogRecord::timestamp() const {
  // @@protoc_insertion_point(field_get:logging.LogRecord.timestamp)
  return timestamp_;
}
 void LogRecord::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:logging.LogRecord.timestamp)
}

// required string message = 5;
bool LogRecord::has_message() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LogRecord::set_has_message() {
  _has_bits_[0] |= 0x00000010u;
}
void LogRecord::clear_has_message() {
  _has_bits_[0] &= ~0x00000010u;
}
void LogRecord::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
 const ::std::string& LogRecord::message() const {
  // @@protoc_insertion_point(field_get:logging.LogRecord.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogRecord::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logging.LogRecord.message)
}
 void LogRecord::set_message(const char* value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logging.LogRecord.message)
}
 void LogRecord::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logging.LogRecord.message)
}
 ::std::string* LogRecord::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:logging.LogRecord.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LogRecord::release_message() {
  // @@protoc_insertion_point(field_release:logging.LogRecord.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogRecord::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:logging.LogRecord.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace logging

// @@protoc_insertion_point(global_scope)
