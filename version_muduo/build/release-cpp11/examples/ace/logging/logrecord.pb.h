// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: logrecord.proto

#ifndef PROTOBUF_logrecord_2eproto__INCLUDED
#define PROTOBUF_logrecord_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace logging {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_logrecord_2eproto();
void protobuf_AssignDesc_logrecord_2eproto();
void protobuf_ShutdownFile_logrecord_2eproto();

class LogRecord;
class LogRecord_Heartbeat;

// ===================================================================

class LogRecord_Heartbeat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:logging.LogRecord.Heartbeat) */ {
 public:
  LogRecord_Heartbeat();
  virtual ~LogRecord_Heartbeat();

  LogRecord_Heartbeat(const LogRecord_Heartbeat& from);

  inline LogRecord_Heartbeat& operator=(const LogRecord_Heartbeat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogRecord_Heartbeat& default_instance();

  void Swap(LogRecord_Heartbeat* other);

  // implements Message ----------------------------------------------

  inline LogRecord_Heartbeat* New() const { return New(NULL); }

  LogRecord_Heartbeat* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogRecord_Heartbeat& from);
  void MergeFrom(const LogRecord_Heartbeat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LogRecord_Heartbeat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string hostname = 1;
  bool has_hostname() const;
  void clear_hostname();
  static const int kHostnameFieldNumber = 1;
  const ::std::string& hostname() const;
  void set_hostname(const ::std::string& value);
  void set_hostname(const char* value);
  void set_hostname(const char* value, size_t size);
  ::std::string* mutable_hostname();
  ::std::string* release_hostname();
  void set_allocated_hostname(::std::string* hostname);

  // required string process_name = 2;
  bool has_process_name() const;
  void clear_process_name();
  static const int kProcessNameFieldNumber = 2;
  const ::std::string& process_name() const;
  void set_process_name(const ::std::string& value);
  void set_process_name(const char* value);
  void set_process_name(const char* value, size_t size);
  ::std::string* mutable_process_name();
  ::std::string* release_process_name();
  void set_allocated_process_name(::std::string* process_name);

  // required int32 process_id = 3;
  bool has_process_id() const;
  void clear_process_id();
  static const int kProcessIdFieldNumber = 3;
  ::google::protobuf::int32 process_id() const;
  void set_process_id(::google::protobuf::int32 value);

  // required int64 process_start_time = 4;
  bool has_process_start_time() const;
  void clear_process_start_time();
  static const int kProcessStartTimeFieldNumber = 4;
  ::google::protobuf::int64 process_start_time() const;
  void set_process_start_time(::google::protobuf::int64 value);

  // required string username = 5;
  bool has_username() const;
  void clear_username();
  static const int kUsernameFieldNumber = 5;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // @@protoc_insertion_point(class_scope:logging.LogRecord.Heartbeat)
 private:
  inline void set_has_hostname();
  inline void clear_has_hostname();
  inline void set_has_process_name();
  inline void clear_has_process_name();
  inline void set_has_process_id();
  inline void clear_has_process_id();
  inline void set_has_process_start_time();
  inline void clear_has_process_start_time();
  inline void set_has_username();
  inline void clear_has_username();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr hostname_;
  ::google::protobuf::internal::ArenaStringPtr process_name_;
  ::google::protobuf::int64 process_start_time_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::int32 process_id_;
  friend void  protobuf_AddDesc_logrecord_2eproto();
  friend void protobuf_AssignDesc_logrecord_2eproto();
  friend void protobuf_ShutdownFile_logrecord_2eproto();

  void InitAsDefaultInstance();
  static LogRecord_Heartbeat* default_instance_;
};
// -------------------------------------------------------------------

class LogRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:logging.LogRecord) */ {
 public:
  LogRecord();
  virtual ~LogRecord();

  LogRecord(const LogRecord& from);

  inline LogRecord& operator=(const LogRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogRecord& default_instance();

  void Swap(LogRecord* other);

  // implements Message ----------------------------------------------

  inline LogRecord* New() const { return New(NULL); }

  LogRecord* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogRecord& from);
  void MergeFrom(const LogRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LogRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef LogRecord_Heartbeat Heartbeat;

  // accessors -------------------------------------------------------

  // optional .logging.LogRecord.Heartbeat heartbeat = 1;
  bool has_heartbeat() const;
  void clear_heartbeat();
  static const int kHeartbeatFieldNumber = 1;
  const ::logging::LogRecord_Heartbeat& heartbeat() const;
  ::logging::LogRecord_Heartbeat* mutable_heartbeat();
  ::logging::LogRecord_Heartbeat* release_heartbeat();
  void set_allocated_heartbeat(::logging::LogRecord_Heartbeat* heartbeat);

  // required int32 level = 2;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 2;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // required int32 thread_id = 3;
  bool has_thread_id() const;
  void clear_thread_id();
  static const int kThreadIdFieldNumber = 3;
  ::google::protobuf::int32 thread_id() const;
  void set_thread_id(::google::protobuf::int32 value);

  // required int64 timestamp = 4;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 4;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // required string message = 5;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 5;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:logging.LogRecord)
 private:
  inline void set_has_heartbeat();
  inline void clear_has_heartbeat();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_thread_id();
  inline void clear_has_thread_id();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_message();
  inline void clear_has_message();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::logging::LogRecord_Heartbeat* heartbeat_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 thread_id_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  friend void  protobuf_AddDesc_logrecord_2eproto();
  friend void protobuf_AssignDesc_logrecord_2eproto();
  friend void protobuf_ShutdownFile_logrecord_2eproto();

  void InitAsDefaultInstance();
  static LogRecord* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// LogRecord_Heartbeat

// required string hostname = 1;
inline bool LogRecord_Heartbeat::has_hostname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogRecord_Heartbeat::set_has_hostname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogRecord_Heartbeat::clear_has_hostname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogRecord_Heartbeat::clear_hostname() {
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hostname();
}
inline const ::std::string& LogRecord_Heartbeat::hostname() const {
  // @@protoc_insertion_point(field_get:logging.LogRecord.Heartbeat.hostname)
  return hostname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogRecord_Heartbeat::set_hostname(const ::std::string& value) {
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logging.LogRecord.Heartbeat.hostname)
}
inline void LogRecord_Heartbeat::set_hostname(const char* value) {
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logging.LogRecord.Heartbeat.hostname)
}
inline void LogRecord_Heartbeat::set_hostname(const char* value, size_t size) {
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logging.LogRecord.Heartbeat.hostname)
}
inline ::std::string* LogRecord_Heartbeat::mutable_hostname() {
  set_has_hostname();
  // @@protoc_insertion_point(field_mutable:logging.LogRecord.Heartbeat.hostname)
  return hostname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogRecord_Heartbeat::release_hostname() {
  // @@protoc_insertion_point(field_release:logging.LogRecord.Heartbeat.hostname)
  clear_has_hostname();
  return hostname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogRecord_Heartbeat::set_allocated_hostname(::std::string* hostname) {
  if (hostname != NULL) {
    set_has_hostname();
  } else {
    clear_has_hostname();
  }
  hostname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hostname);
  // @@protoc_insertion_point(field_set_allocated:logging.LogRecord.Heartbeat.hostname)
}

// required string process_name = 2;
inline bool LogRecord_Heartbeat::has_process_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogRecord_Heartbeat::set_has_process_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogRecord_Heartbeat::clear_has_process_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogRecord_Heartbeat::clear_process_name() {
  process_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_process_name();
}
inline const ::std::string& LogRecord_Heartbeat::process_name() const {
  // @@protoc_insertion_point(field_get:logging.LogRecord.Heartbeat.process_name)
  return process_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogRecord_Heartbeat::set_process_name(const ::std::string& value) {
  set_has_process_name();
  process_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logging.LogRecord.Heartbeat.process_name)
}
inline void LogRecord_Heartbeat::set_process_name(const char* value) {
  set_has_process_name();
  process_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logging.LogRecord.Heartbeat.process_name)
}
inline void LogRecord_Heartbeat::set_process_name(const char* value, size_t size) {
  set_has_process_name();
  process_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logging.LogRecord.Heartbeat.process_name)
}
inline ::std::string* LogRecord_Heartbeat::mutable_process_name() {
  set_has_process_name();
  // @@protoc_insertion_point(field_mutable:logging.LogRecord.Heartbeat.process_name)
  return process_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogRecord_Heartbeat::release_process_name() {
  // @@protoc_insertion_point(field_release:logging.LogRecord.Heartbeat.process_name)
  clear_has_process_name();
  return process_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogRecord_Heartbeat::set_allocated_process_name(::std::string* process_name) {
  if (process_name != NULL) {
    set_has_process_name();
  } else {
    clear_has_process_name();
  }
  process_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), process_name);
  // @@protoc_insertion_point(field_set_allocated:logging.LogRecord.Heartbeat.process_name)
}

// required int32 process_id = 3;
inline bool LogRecord_Heartbeat::has_process_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogRecord_Heartbeat::set_has_process_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogRecord_Heartbeat::clear_has_process_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogRecord_Heartbeat::clear_process_id() {
  process_id_ = 0;
  clear_has_process_id();
}
inline ::google::protobuf::int32 LogRecord_Heartbeat::process_id() const {
  // @@protoc_insertion_point(field_get:logging.LogRecord.Heartbeat.process_id)
  return process_id_;
}
inline void LogRecord_Heartbeat::set_process_id(::google::protobuf::int32 value) {
  set_has_process_id();
  process_id_ = value;
  // @@protoc_insertion_point(field_set:logging.LogRecord.Heartbeat.process_id)
}

// required int64 process_start_time = 4;
inline bool LogRecord_Heartbeat::has_process_start_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogRecord_Heartbeat::set_has_process_start_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogRecord_Heartbeat::clear_has_process_start_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogRecord_Heartbeat::clear_process_start_time() {
  process_start_time_ = GOOGLE_LONGLONG(0);
  clear_has_process_start_time();
}
inline ::google::protobuf::int64 LogRecord_Heartbeat::process_start_time() const {
  // @@protoc_insertion_point(field_get:logging.LogRecord.Heartbeat.process_start_time)
  return process_start_time_;
}
inline void LogRecord_Heartbeat::set_process_start_time(::google::protobuf::int64 value) {
  set_has_process_start_time();
  process_start_time_ = value;
  // @@protoc_insertion_point(field_set:logging.LogRecord.Heartbeat.process_start_time)
}

// required string username = 5;
inline bool LogRecord_Heartbeat::has_username() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogRecord_Heartbeat::set_has_username() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LogRecord_Heartbeat::clear_has_username() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LogRecord_Heartbeat::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& LogRecord_Heartbeat::username() const {
  // @@protoc_insertion_point(field_get:logging.LogRecord.Heartbeat.username)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogRecord_Heartbeat::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logging.LogRecord.Heartbeat.username)
}
inline void LogRecord_Heartbeat::set_username(const char* value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logging.LogRecord.Heartbeat.username)
}
inline void LogRecord_Heartbeat::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logging.LogRecord.Heartbeat.username)
}
inline ::std::string* LogRecord_Heartbeat::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:logging.LogRecord.Heartbeat.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogRecord_Heartbeat::release_username() {
  // @@protoc_insertion_point(field_release:logging.LogRecord.Heartbeat.username)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogRecord_Heartbeat::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:logging.LogRecord.Heartbeat.username)
}

// -------------------------------------------------------------------

// LogRecord

// optional .logging.LogRecord.Heartbeat heartbeat = 1;
inline bool LogRecord::has_heartbeat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogRecord::set_has_heartbeat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogRecord::clear_has_heartbeat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogRecord::clear_heartbeat() {
  if (heartbeat_ != NULL) heartbeat_->::logging::LogRecord_Heartbeat::Clear();
  clear_has_heartbeat();
}
inline const ::logging::LogRecord_Heartbeat& LogRecord::heartbeat() const {
  // @@protoc_insertion_point(field_get:logging.LogRecord.heartbeat)
  return heartbeat_ != NULL ? *heartbeat_ : *default_instance_->heartbeat_;
}
inline ::logging::LogRecord_Heartbeat* LogRecord::mutable_heartbeat() {
  set_has_heartbeat();
  if (heartbeat_ == NULL) {
    heartbeat_ = new ::logging::LogRecord_Heartbeat;
  }
  // @@protoc_insertion_point(field_mutable:logging.LogRecord.heartbeat)
  return heartbeat_;
}
inline ::logging::LogRecord_Heartbeat* LogRecord::release_heartbeat() {
  // @@protoc_insertion_point(field_release:logging.LogRecord.heartbeat)
  clear_has_heartbeat();
  ::logging::LogRecord_Heartbeat* temp = heartbeat_;
  heartbeat_ = NULL;
  return temp;
}
inline void LogRecord::set_allocated_heartbeat(::logging::LogRecord_Heartbeat* heartbeat) {
  delete heartbeat_;
  heartbeat_ = heartbeat;
  if (heartbeat) {
    set_has_heartbeat();
  } else {
    clear_has_heartbeat();
  }
  // @@protoc_insertion_point(field_set_allocated:logging.LogRecord.heartbeat)
}

// required int32 level = 2;
inline bool LogRecord::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogRecord::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogRecord::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogRecord::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 LogRecord::level() const {
  // @@protoc_insertion_point(field_get:logging.LogRecord.level)
  return level_;
}
inline void LogRecord::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:logging.LogRecord.level)
}

// required int32 thread_id = 3;
inline bool LogRecord::has_thread_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogRecord::set_has_thread_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogRecord::clear_has_thread_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogRecord::clear_thread_id() {
  thread_id_ = 0;
  clear_has_thread_id();
}
inline ::google::protobuf::int32 LogRecord::thread_id() const {
  // @@protoc_insertion_point(field_get:logging.LogRecord.thread_id)
  return thread_id_;
}
inline void LogRecord::set_thread_id(::google::protobuf::int32 value) {
  set_has_thread_id();
  thread_id_ = value;
  // @@protoc_insertion_point(field_set:logging.LogRecord.thread_id)
}

// required int64 timestamp = 4;
inline bool LogRecord::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogRecord::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogRecord::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogRecord::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 LogRecord::timestamp() const {
  // @@protoc_insertion_point(field_get:logging.LogRecord.timestamp)
  return timestamp_;
}
inline void LogRecord::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:logging.LogRecord.timestamp)
}

// required string message = 5;
inline bool LogRecord::has_message() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogRecord::set_has_message() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LogRecord::clear_has_message() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LogRecord::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
inline const ::std::string& LogRecord::message() const {
  // @@protoc_insertion_point(field_get:logging.LogRecord.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogRecord::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logging.LogRecord.message)
}
inline void LogRecord::set_message(const char* value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logging.LogRecord.message)
}
inline void LogRecord::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logging.LogRecord.message)
}
inline ::std::string* LogRecord::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:logging.LogRecord.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogRecord::release_message() {
  // @@protoc_insertion_point(field_release:logging.LogRecord.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogRecord::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:logging.LogRecord.message)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace logging

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_logrecord_2eproto__INCLUDED
